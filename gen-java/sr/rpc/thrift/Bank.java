/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package sr.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-05")
public class Bank {

  public interface Iface {

    public AccountDetails createUser(UserData dane) throws UserException, org.apache.thrift.TException;

    public CurrencyDetails activeCredit(java.lang.String pesel, java.lang.String klucz, Currency waluta, int kwota) throws CurrencyNotSupported, org.apache.thrift.TException;

    public CurrencyDetails getAccountBalance(java.lang.String pesel, java.lang.String klucz) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createUser(UserData dane, org.apache.thrift.async.AsyncMethodCallback<AccountDetails> resultHandler) throws org.apache.thrift.TException;

    public void activeCredit(java.lang.String pesel, java.lang.String klucz, Currency waluta, int kwota, org.apache.thrift.async.AsyncMethodCallback<CurrencyDetails> resultHandler) throws org.apache.thrift.TException;

    public void getAccountBalance(java.lang.String pesel, java.lang.String klucz, org.apache.thrift.async.AsyncMethodCallback<CurrencyDetails> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public AccountDetails createUser(UserData dane) throws UserException, org.apache.thrift.TException
    {
      send_createUser(dane);
      return recv_createUser();
    }

    public void send_createUser(UserData dane) throws org.apache.thrift.TException
    {
      createUser_args args = new createUser_args();
      args.setDane(dane);
      sendBase("createUser", args);
    }

    public AccountDetails recv_createUser() throws UserException, org.apache.thrift.TException
    {
      createUser_result result = new createUser_result();
      receiveBase(result, "createUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createUser failed: unknown result");
    }

    public CurrencyDetails activeCredit(java.lang.String pesel, java.lang.String klucz, Currency waluta, int kwota) throws CurrencyNotSupported, org.apache.thrift.TException
    {
      send_activeCredit(pesel, klucz, waluta, kwota);
      return recv_activeCredit();
    }

    public void send_activeCredit(java.lang.String pesel, java.lang.String klucz, Currency waluta, int kwota) throws org.apache.thrift.TException
    {
      activeCredit_args args = new activeCredit_args();
      args.setPesel(pesel);
      args.setKlucz(klucz);
      args.setWaluta(waluta);
      args.setKwota(kwota);
      sendBase("activeCredit", args);
    }

    public CurrencyDetails recv_activeCredit() throws CurrencyNotSupported, org.apache.thrift.TException
    {
      activeCredit_result result = new activeCredit_result();
      receiveBase(result, "activeCredit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "activeCredit failed: unknown result");
    }

    public CurrencyDetails getAccountBalance(java.lang.String pesel, java.lang.String klucz) throws org.apache.thrift.TException
    {
      send_getAccountBalance(pesel, klucz);
      return recv_getAccountBalance();
    }

    public void send_getAccountBalance(java.lang.String pesel, java.lang.String klucz) throws org.apache.thrift.TException
    {
      getAccountBalance_args args = new getAccountBalance_args();
      args.setPesel(pesel);
      args.setKlucz(klucz);
      sendBase("getAccountBalance", args);
    }

    public CurrencyDetails recv_getAccountBalance() throws org.apache.thrift.TException
    {
      getAccountBalance_result result = new getAccountBalance_result();
      receiveBase(result, "getAccountBalance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAccountBalance failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createUser(UserData dane, org.apache.thrift.async.AsyncMethodCallback<AccountDetails> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createUser_call method_call = new createUser_call(dane, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createUser_call extends org.apache.thrift.async.TAsyncMethodCall<AccountDetails> {
      private UserData dane;
      public createUser_call(UserData dane, org.apache.thrift.async.AsyncMethodCallback<AccountDetails> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dane = dane;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createUser_args args = new createUser_args();
        args.setDane(dane);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AccountDetails getResult() throws UserException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createUser();
      }
    }

    public void activeCredit(java.lang.String pesel, java.lang.String klucz, Currency waluta, int kwota, org.apache.thrift.async.AsyncMethodCallback<CurrencyDetails> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      activeCredit_call method_call = new activeCredit_call(pesel, klucz, waluta, kwota, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class activeCredit_call extends org.apache.thrift.async.TAsyncMethodCall<CurrencyDetails> {
      private java.lang.String pesel;
      private java.lang.String klucz;
      private Currency waluta;
      private int kwota;
      public activeCredit_call(java.lang.String pesel, java.lang.String klucz, Currency waluta, int kwota, org.apache.thrift.async.AsyncMethodCallback<CurrencyDetails> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pesel = pesel;
        this.klucz = klucz;
        this.waluta = waluta;
        this.kwota = kwota;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("activeCredit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        activeCredit_args args = new activeCredit_args();
        args.setPesel(pesel);
        args.setKlucz(klucz);
        args.setWaluta(waluta);
        args.setKwota(kwota);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CurrencyDetails getResult() throws CurrencyNotSupported, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_activeCredit();
      }
    }

    public void getAccountBalance(java.lang.String pesel, java.lang.String klucz, org.apache.thrift.async.AsyncMethodCallback<CurrencyDetails> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAccountBalance_call method_call = new getAccountBalance_call(pesel, klucz, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAccountBalance_call extends org.apache.thrift.async.TAsyncMethodCall<CurrencyDetails> {
      private java.lang.String pesel;
      private java.lang.String klucz;
      public getAccountBalance_call(java.lang.String pesel, java.lang.String klucz, org.apache.thrift.async.AsyncMethodCallback<CurrencyDetails> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pesel = pesel;
        this.klucz = klucz;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccountBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAccountBalance_args args = new getAccountBalance_args();
        args.setPesel(pesel);
        args.setKlucz(klucz);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CurrencyDetails getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAccountBalance();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createUser", new createUser());
      processMap.put("activeCredit", new activeCredit());
      processMap.put("getAccountBalance", new getAccountBalance());
      return processMap;
    }

    public static class createUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createUser_args> {
      public createUser() {
        super("createUser");
      }

      public createUser_args getEmptyArgsInstance() {
        return new createUser_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public createUser_result getResult(I iface, createUser_args args) throws org.apache.thrift.TException {
        createUser_result result = new createUser_result();
        try {
          result.success = iface.createUser(args.dane);
        } catch (UserException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class activeCredit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, activeCredit_args> {
      public activeCredit() {
        super("activeCredit");
      }

      public activeCredit_args getEmptyArgsInstance() {
        return new activeCredit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public activeCredit_result getResult(I iface, activeCredit_args args) throws org.apache.thrift.TException {
        activeCredit_result result = new activeCredit_result();
        try {
          result.success = iface.activeCredit(args.pesel, args.klucz, args.waluta, args.kwota);
        } catch (CurrencyNotSupported ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class getAccountBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAccountBalance_args> {
      public getAccountBalance() {
        super("getAccountBalance");
      }

      public getAccountBalance_args getEmptyArgsInstance() {
        return new getAccountBalance_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getAccountBalance_result getResult(I iface, getAccountBalance_args args) throws org.apache.thrift.TException {
        getAccountBalance_result result = new getAccountBalance_result();
        result.success = iface.getAccountBalance(args.pesel, args.klucz);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createUser", new createUser());
      processMap.put("activeCredit", new activeCredit());
      processMap.put("getAccountBalance", new getAccountBalance());
      return processMap;
    }

    public static class createUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createUser_args, AccountDetails> {
      public createUser() {
        super("createUser");
      }

      public createUser_args getEmptyArgsInstance() {
        return new createUser_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<AccountDetails> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<AccountDetails>() { 
          public void onComplete(AccountDetails o) {
            createUser_result result = new createUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createUser_result result = new createUser_result();
            if (e instanceof UserException) {
              result.ex = (UserException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createUser_args args, org.apache.thrift.async.AsyncMethodCallback<AccountDetails> resultHandler) throws org.apache.thrift.TException {
        iface.createUser(args.dane,resultHandler);
      }
    }

    public static class activeCredit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, activeCredit_args, CurrencyDetails> {
      public activeCredit() {
        super("activeCredit");
      }

      public activeCredit_args getEmptyArgsInstance() {
        return new activeCredit_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CurrencyDetails> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CurrencyDetails>() { 
          public void onComplete(CurrencyDetails o) {
            activeCredit_result result = new activeCredit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            activeCredit_result result = new activeCredit_result();
            if (e instanceof CurrencyNotSupported) {
              result.ex = (CurrencyNotSupported) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, activeCredit_args args, org.apache.thrift.async.AsyncMethodCallback<CurrencyDetails> resultHandler) throws org.apache.thrift.TException {
        iface.activeCredit(args.pesel, args.klucz, args.waluta, args.kwota,resultHandler);
      }
    }

    public static class getAccountBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAccountBalance_args, CurrencyDetails> {
      public getAccountBalance() {
        super("getAccountBalance");
      }

      public getAccountBalance_args getEmptyArgsInstance() {
        return new getAccountBalance_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CurrencyDetails> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CurrencyDetails>() { 
          public void onComplete(CurrencyDetails o) {
            getAccountBalance_result result = new getAccountBalance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAccountBalance_result result = new getAccountBalance_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAccountBalance_args args, org.apache.thrift.async.AsyncMethodCallback<CurrencyDetails> resultHandler) throws org.apache.thrift.TException {
        iface.getAccountBalance(args.pesel, args.klucz,resultHandler);
      }
    }

  }

  public static class createUser_args implements org.apache.thrift.TBase<createUser_args, createUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<createUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createUser_args");

    private static final org.apache.thrift.protocol.TField DANE_FIELD_DESC = new org.apache.thrift.protocol.TField("dane", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createUser_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createUser_argsTupleSchemeFactory();

    public  UserData dane; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DANE((short)1, "dane");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DANE
            return DANE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DANE, new org.apache.thrift.meta_data.FieldMetaData("dane", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createUser_args.class, metaDataMap);
    }

    public createUser_args() {
    }

    public createUser_args(
      UserData dane)
    {
      this();
      this.dane = dane;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createUser_args(createUser_args other) {
      if (other.isSetDane()) {
        this.dane = new UserData(other.dane);
      }
    }

    public createUser_args deepCopy() {
      return new createUser_args(this);
    }


    public void clear() {
      this.dane = null;
    }


    public UserData getDane() {
      return this.dane;
    }

    public createUser_args setDane( UserData dane) {
      this.dane = dane;
      return this;
    }

    public void unsetDane() {
      this.dane = null;
    }

    /** Returns true if field dane is set (has been assigned a value) and false otherwise */
    public boolean isSetDane() {
      return this.dane != null;
    }

    public void setDaneIsSet(boolean value) {
      if (!value) {
        this.dane = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DANE:
        if (value == null) {
          unsetDane();
        } else {
          setDane((UserData)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DANE:
        return getDane();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DANE:
        return isSetDane();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createUser_args)
        return this.equals((createUser_args)that);
      return false;
    }

    public boolean equals(createUser_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dane = true && this.isSetDane();
      boolean that_present_dane = true && that.isSetDane();
      if (this_present_dane || that_present_dane) {
        if (!(this_present_dane && that_present_dane))
          return false;
        if (!this.dane.equals(that.dane))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDane()) ? 131071 : 524287);
      if (isSetDane())
        hashCode = hashCode * 8191 + dane.hashCode();

      return hashCode;
    }


    public int compareTo(createUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDane()).compareTo(other.isSetDane());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDane()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dane, other.dane);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createUser_args(");
      boolean first = true;

      sb.append("dane:");
      if (this.dane == null) {
        sb.append("null");
      } else {
        sb.append(this.dane);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dane != null) {
        dane.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createUser_argsStandardScheme getScheme() {
        return new createUser_argsStandardScheme();
      }
    }

    private static class createUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DANE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dane = new UserData();
                struct.dane.read(iprot);
                struct.setDaneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dane != null) {
          oprot.writeFieldBegin(DANE_FIELD_DESC);
          struct.dane.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createUser_argsTupleScheme getScheme() {
        return new createUser_argsTupleScheme();
      }
    }

    private static class createUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createUser_args> {

      public void write(org.apache.thrift.protocol.TProtocol prot, createUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDane()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDane()) {
          struct.dane.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, createUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dane = new UserData();
          struct.dane.read(iprot);
          struct.setDaneIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createUser_result implements org.apache.thrift.TBase<createUser_result, createUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<createUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createUser_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createUser_resultTupleSchemeFactory();

    public  AccountDetails success; // required
    public  UserException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccountDetails.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createUser_result.class, metaDataMap);
    }

    public createUser_result() {
    }

    public createUser_result(
      AccountDetails success,
      UserException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createUser_result(createUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new AccountDetails(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new UserException(other.ex);
      }
    }

    public createUser_result deepCopy() {
      return new createUser_result(this);
    }


    public void clear() {
      this.success = null;
      this.ex = null;
    }


    public AccountDetails getSuccess() {
      return this.success;
    }

    public createUser_result setSuccess( AccountDetails success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UserException getEx() {
      return this.ex;
    }

    public createUser_result setEx( UserException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AccountDetails)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((UserException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createUser_result)
        return this.equals((createUser_result)that);
      return false;
    }

    public boolean equals(createUser_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }


    public int compareTo(createUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createUser_resultStandardScheme getScheme() {
        return new createUser_resultStandardScheme();
      }
    }

    private static class createUser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AccountDetails();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new UserException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createUser_resultTupleScheme getScheme() {
        return new createUser_resultTupleScheme();
      }
    }

    private static class createUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createUser_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, createUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, createUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new AccountDetails();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new UserException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class activeCredit_args implements org.apache.thrift.TBase<activeCredit_args, activeCredit_args._Fields>, java.io.Serializable, Cloneable, Comparable<activeCredit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activeCredit_args");

    private static final org.apache.thrift.protocol.TField PESEL_FIELD_DESC = new org.apache.thrift.protocol.TField("pesel", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KLUCZ_FIELD_DESC = new org.apache.thrift.protocol.TField("klucz", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField WALUTA_FIELD_DESC = new org.apache.thrift.protocol.TField("waluta", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField KWOTA_FIELD_DESC = new org.apache.thrift.protocol.TField("kwota", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new activeCredit_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new activeCredit_argsTupleSchemeFactory();

    public  java.lang.String pesel; // required
    public  java.lang.String klucz; // required
    /**
     * 
     * @see Currency
     */
    public Currency waluta; // required
    public int kwota; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PESEL((short)1, "pesel"),
      KLUCZ((short)2, "klucz"),
      /**
       * 
       * @see Currency
       */
      WALUTA((short)3, "waluta"),
      KWOTA((short)4, "kwota");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PESEL
            return PESEL;
          case 2: // KLUCZ
            return KLUCZ;
          case 3: // WALUTA
            return WALUTA;
          case 4: // KWOTA
            return KWOTA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __KWOTA_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PESEL, new org.apache.thrift.meta_data.FieldMetaData("pesel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KLUCZ, new org.apache.thrift.meta_data.FieldMetaData("klucz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WALUTA, new org.apache.thrift.meta_data.FieldMetaData("waluta", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Currency.class)));
      tmpMap.put(_Fields.KWOTA, new org.apache.thrift.meta_data.FieldMetaData("kwota", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activeCredit_args.class, metaDataMap);
    }

    public activeCredit_args() {
    }

    public activeCredit_args(
      java.lang.String pesel,
      java.lang.String klucz,
      Currency waluta,
      int kwota)
    {
      this();
      this.pesel = pesel;
      this.klucz = klucz;
      this.waluta = waluta;
      this.kwota = kwota;
      setKwotaIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activeCredit_args(activeCredit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPesel()) {
        this.pesel = other.pesel;
      }
      if (other.isSetKlucz()) {
        this.klucz = other.klucz;
      }
      if (other.isSetWaluta()) {
        this.waluta = other.waluta;
      }
      this.kwota = other.kwota;
    }

    public activeCredit_args deepCopy() {
      return new activeCredit_args(this);
    }


    public void clear() {
      this.pesel = null;
      this.klucz = null;
      this.waluta = null;
      setKwotaIsSet(false);
      this.kwota = 0;
    }


    public java.lang.String getPesel() {
      return this.pesel;
    }

    public activeCredit_args setPesel( java.lang.String pesel) {
      this.pesel = pesel;
      return this;
    }

    public void unsetPesel() {
      this.pesel = null;
    }

    /** Returns true if field pesel is set (has been assigned a value) and false otherwise */
    public boolean isSetPesel() {
      return this.pesel != null;
    }

    public void setPeselIsSet(boolean value) {
      if (!value) {
        this.pesel = null;
      }
    }


    public java.lang.String getKlucz() {
      return this.klucz;
    }

    public activeCredit_args setKlucz( java.lang.String klucz) {
      this.klucz = klucz;
      return this;
    }

    public void unsetKlucz() {
      this.klucz = null;
    }

    /** Returns true if field klucz is set (has been assigned a value) and false otherwise */
    public boolean isSetKlucz() {
      return this.klucz != null;
    }

    public void setKluczIsSet(boolean value) {
      if (!value) {
        this.klucz = null;
      }
    }

    /**
     * 
     * @see Currency
     */

    public Currency getWaluta() {
      return this.waluta;
    }

    /**
     * 
     * @see Currency
     */
    public activeCredit_args setWaluta(Currency waluta) {
      this.waluta = waluta;
      return this;
    }

    public void unsetWaluta() {
      this.waluta = null;
    }

    /** Returns true if field waluta is set (has been assigned a value) and false otherwise */
    public boolean isSetWaluta() {
      return this.waluta != null;
    }

    public void setWalutaIsSet(boolean value) {
      if (!value) {
        this.waluta = null;
      }
    }

    public int getKwota() {
      return this.kwota;
    }

    public activeCredit_args setKwota(int kwota) {
      this.kwota = kwota;
      setKwotaIsSet(true);
      return this;
    }

    public void unsetKwota() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KWOTA_ISSET_ID);
    }

    /** Returns true if field kwota is set (has been assigned a value) and false otherwise */
    public boolean isSetKwota() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KWOTA_ISSET_ID);
    }

    public void setKwotaIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KWOTA_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case PESEL:
        if (value == null) {
          unsetPesel();
        } else {
          setPesel((java.lang.String)value);
        }
        break;

      case KLUCZ:
        if (value == null) {
          unsetKlucz();
        } else {
          setKlucz((java.lang.String)value);
        }
        break;

      case WALUTA:
        if (value == null) {
          unsetWaluta();
        } else {
          setWaluta((Currency)value);
        }
        break;

      case KWOTA:
        if (value == null) {
          unsetKwota();
        } else {
          setKwota((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PESEL:
        return getPesel();

      case KLUCZ:
        return getKlucz();

      case WALUTA:
        return getWaluta();

      case KWOTA:
        return getKwota();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PESEL:
        return isSetPesel();
      case KLUCZ:
        return isSetKlucz();
      case WALUTA:
        return isSetWaluta();
      case KWOTA:
        return isSetKwota();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof activeCredit_args)
        return this.equals((activeCredit_args)that);
      return false;
    }

    public boolean equals(activeCredit_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pesel = true && this.isSetPesel();
      boolean that_present_pesel = true && that.isSetPesel();
      if (this_present_pesel || that_present_pesel) {
        if (!(this_present_pesel && that_present_pesel))
          return false;
        if (!this.pesel.equals(that.pesel))
          return false;
      }

      boolean this_present_klucz = true && this.isSetKlucz();
      boolean that_present_klucz = true && that.isSetKlucz();
      if (this_present_klucz || that_present_klucz) {
        if (!(this_present_klucz && that_present_klucz))
          return false;
        if (!this.klucz.equals(that.klucz))
          return false;
      }

      boolean this_present_waluta = true && this.isSetWaluta();
      boolean that_present_waluta = true && that.isSetWaluta();
      if (this_present_waluta || that_present_waluta) {
        if (!(this_present_waluta && that_present_waluta))
          return false;
        if (!this.waluta.equals(that.waluta))
          return false;
      }

      boolean this_present_kwota = true;
      boolean that_present_kwota = true;
      if (this_present_kwota || that_present_kwota) {
        if (!(this_present_kwota && that_present_kwota))
          return false;
        if (this.kwota != that.kwota)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPesel()) ? 131071 : 524287);
      if (isSetPesel())
        hashCode = hashCode * 8191 + pesel.hashCode();

      hashCode = hashCode * 8191 + ((isSetKlucz()) ? 131071 : 524287);
      if (isSetKlucz())
        hashCode = hashCode * 8191 + klucz.hashCode();

      hashCode = hashCode * 8191 + ((isSetWaluta()) ? 131071 : 524287);
      if (isSetWaluta())
        hashCode = hashCode * 8191 + waluta.getValue();

      hashCode = hashCode * 8191 + kwota;

      return hashCode;
    }


    public int compareTo(activeCredit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPesel()).compareTo(other.isSetPesel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPesel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pesel, other.pesel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKlucz()).compareTo(other.isSetKlucz());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKlucz()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.klucz, other.klucz);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetWaluta()).compareTo(other.isSetWaluta());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWaluta()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waluta, other.waluta);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKwota()).compareTo(other.isSetKwota());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKwota()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kwota, other.kwota);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("activeCredit_args(");
      boolean first = true;

      sb.append("pesel:");
      if (this.pesel == null) {
        sb.append("null");
      } else {
        sb.append(this.pesel);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("klucz:");
      if (this.klucz == null) {
        sb.append("null");
      } else {
        sb.append(this.klucz);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("waluta:");
      if (this.waluta == null) {
        sb.append("null");
      } else {
        sb.append(this.waluta);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kwota:");
      sb.append(this.kwota);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activeCredit_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public activeCredit_argsStandardScheme getScheme() {
        return new activeCredit_argsStandardScheme();
      }
    }

    private static class activeCredit_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<activeCredit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activeCredit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PESEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pesel = iprot.readString();
                struct.setPeselIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KLUCZ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.klucz = iprot.readString();
                struct.setKluczIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // WALUTA
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.waluta = sr.rpc.thrift.Currency.findByValue(iprot.readI32());
                struct.setWalutaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // KWOTA
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.kwota = iprot.readI32();
                struct.setKwotaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activeCredit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pesel != null) {
          oprot.writeFieldBegin(PESEL_FIELD_DESC);
          oprot.writeString(struct.pesel);
          oprot.writeFieldEnd();
        }
        if (struct.klucz != null) {
          oprot.writeFieldBegin(KLUCZ_FIELD_DESC);
          oprot.writeString(struct.klucz);
          oprot.writeFieldEnd();
        }
        if (struct.waluta != null) {
          oprot.writeFieldBegin(WALUTA_FIELD_DESC);
          oprot.writeI32(struct.waluta.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(KWOTA_FIELD_DESC);
        oprot.writeI32(struct.kwota);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activeCredit_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public activeCredit_argsTupleScheme getScheme() {
        return new activeCredit_argsTupleScheme();
      }
    }

    private static class activeCredit_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<activeCredit_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, activeCredit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPesel()) {
          optionals.set(0);
        }
        if (struct.isSetKlucz()) {
          optionals.set(1);
        }
        if (struct.isSetWaluta()) {
          optionals.set(2);
        }
        if (struct.isSetKwota()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPesel()) {
          oprot.writeString(struct.pesel);
        }
        if (struct.isSetKlucz()) {
          oprot.writeString(struct.klucz);
        }
        if (struct.isSetWaluta()) {
          oprot.writeI32(struct.waluta.getValue());
        }
        if (struct.isSetKwota()) {
          oprot.writeI32(struct.kwota);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, activeCredit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.pesel = iprot.readString();
          struct.setPeselIsSet(true);
        }
        if (incoming.get(1)) {
          struct.klucz = iprot.readString();
          struct.setKluczIsSet(true);
        }
        if (incoming.get(2)) {
          struct.waluta = sr.rpc.thrift.Currency.findByValue(iprot.readI32());
          struct.setWalutaIsSet(true);
        }
        if (incoming.get(3)) {
          struct.kwota = iprot.readI32();
          struct.setKwotaIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class activeCredit_result implements org.apache.thrift.TBase<activeCredit_result, activeCredit_result._Fields>, java.io.Serializable, Cloneable, Comparable<activeCredit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activeCredit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new activeCredit_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new activeCredit_resultTupleSchemeFactory();

    public  CurrencyDetails success; // required
    public  CurrencyNotSupported ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CurrencyDetails.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CurrencyNotSupported.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activeCredit_result.class, metaDataMap);
    }

    public activeCredit_result() {
    }

    public activeCredit_result(
      CurrencyDetails success,
      CurrencyNotSupported ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activeCredit_result(activeCredit_result other) {
      if (other.isSetSuccess()) {
        this.success = new CurrencyDetails(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new CurrencyNotSupported(other.ex);
      }
    }

    public activeCredit_result deepCopy() {
      return new activeCredit_result(this);
    }


    public void clear() {
      this.success = null;
      this.ex = null;
    }


    public CurrencyDetails getSuccess() {
      return this.success;
    }

    public activeCredit_result setSuccess( CurrencyDetails success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CurrencyNotSupported getEx() {
      return this.ex;
    }

    public activeCredit_result setEx( CurrencyNotSupported ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CurrencyDetails)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((CurrencyNotSupported)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof activeCredit_result)
        return this.equals((activeCredit_result)that);
      return false;
    }

    public boolean equals(activeCredit_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }


    public int compareTo(activeCredit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("activeCredit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activeCredit_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public activeCredit_resultStandardScheme getScheme() {
        return new activeCredit_resultStandardScheme();
      }
    }

    private static class activeCredit_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<activeCredit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activeCredit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CurrencyDetails();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new CurrencyNotSupported();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activeCredit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activeCredit_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public activeCredit_resultTupleScheme getScheme() {
        return new activeCredit_resultTupleScheme();
      }
    }

    private static class activeCredit_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<activeCredit_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, activeCredit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, activeCredit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CurrencyDetails();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new CurrencyNotSupported();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAccountBalance_args implements org.apache.thrift.TBase<getAccountBalance_args, getAccountBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAccountBalance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccountBalance_args");

    private static final org.apache.thrift.protocol.TField PESEL_FIELD_DESC = new org.apache.thrift.protocol.TField("pesel", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KLUCZ_FIELD_DESC = new org.apache.thrift.protocol.TField("klucz", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAccountBalance_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAccountBalance_argsTupleSchemeFactory();

    public  java.lang.String pesel; // required
    public  java.lang.String klucz; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PESEL((short)1, "pesel"),
      KLUCZ((short)2, "klucz");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PESEL
            return PESEL;
          case 2: // KLUCZ
            return KLUCZ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PESEL, new org.apache.thrift.meta_data.FieldMetaData("pesel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KLUCZ, new org.apache.thrift.meta_data.FieldMetaData("klucz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccountBalance_args.class, metaDataMap);
    }

    public getAccountBalance_args() {
    }

    public getAccountBalance_args(
      java.lang.String pesel,
      java.lang.String klucz)
    {
      this();
      this.pesel = pesel;
      this.klucz = klucz;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccountBalance_args(getAccountBalance_args other) {
      if (other.isSetPesel()) {
        this.pesel = other.pesel;
      }
      if (other.isSetKlucz()) {
        this.klucz = other.klucz;
      }
    }

    public getAccountBalance_args deepCopy() {
      return new getAccountBalance_args(this);
    }


    public void clear() {
      this.pesel = null;
      this.klucz = null;
    }


    public java.lang.String getPesel() {
      return this.pesel;
    }

    public getAccountBalance_args setPesel( java.lang.String pesel) {
      this.pesel = pesel;
      return this;
    }

    public void unsetPesel() {
      this.pesel = null;
    }

    /** Returns true if field pesel is set (has been assigned a value) and false otherwise */
    public boolean isSetPesel() {
      return this.pesel != null;
    }

    public void setPeselIsSet(boolean value) {
      if (!value) {
        this.pesel = null;
      }
    }


    public java.lang.String getKlucz() {
      return this.klucz;
    }

    public getAccountBalance_args setKlucz( java.lang.String klucz) {
      this.klucz = klucz;
      return this;
    }

    public void unsetKlucz() {
      this.klucz = null;
    }

    /** Returns true if field klucz is set (has been assigned a value) and false otherwise */
    public boolean isSetKlucz() {
      return this.klucz != null;
    }

    public void setKluczIsSet(boolean value) {
      if (!value) {
        this.klucz = null;
      }
    }

    public void setFieldValue(_Fields field,java.lang.Object value) {
      switch (field) {
      case PESEL:
        if (value == null) {
          unsetPesel();
        } else {
          setPesel((java.lang.String)value);
        }
        break;

      case KLUCZ:
        if (value == null) {
          unsetKlucz();
        } else {
          setKlucz((java.lang.String)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PESEL:
        return getPesel();

      case KLUCZ:
        return getKlucz();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PESEL:
        return isSetPesel();
      case KLUCZ:
        return isSetKlucz();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccountBalance_args)
        return this.equals((getAccountBalance_args)that);
      return false;
    }

    public boolean equals(getAccountBalance_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pesel = true && this.isSetPesel();
      boolean that_present_pesel = true && that.isSetPesel();
      if (this_present_pesel || that_present_pesel) {
        if (!(this_present_pesel && that_present_pesel))
          return false;
        if (!this.pesel.equals(that.pesel))
          return false;
      }

      boolean this_present_klucz = true && this.isSetKlucz();
      boolean that_present_klucz = true && that.isSetKlucz();
      if (this_present_klucz || that_present_klucz) {
        if (!(this_present_klucz && that_present_klucz))
          return false;
        if (!this.klucz.equals(that.klucz))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPesel()) ? 131071 : 524287);
      if (isSetPesel())
        hashCode = hashCode * 8191 + pesel.hashCode();

      hashCode = hashCode * 8191 + ((isSetKlucz()) ? 131071 : 524287);
      if (isSetKlucz())
        hashCode = hashCode * 8191 + klucz.hashCode();

      return hashCode;
    }


    public int compareTo(getAccountBalance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPesel()).compareTo(other.isSetPesel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPesel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pesel, other.pesel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKlucz()).compareTo(other.isSetKlucz());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKlucz()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.klucz, other.klucz);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAccountBalance_args(");
      boolean first = true;

      sb.append("pesel:");
      if (this.pesel == null) {
        sb.append("null");
      } else {
        sb.append(this.pesel);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("klucz:");
      if (this.klucz == null) {
        sb.append("null");
      } else {
        sb.append(this.klucz);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAccountBalance_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccountBalance_argsStandardScheme getScheme() {
        return new getAccountBalance_argsStandardScheme();
      }
    }

    private static class getAccountBalance_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAccountBalance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAccountBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PESEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pesel = iprot.readString();
                struct.setPeselIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KLUCZ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.klucz = iprot.readString();
                struct.setKluczIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAccountBalance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pesel != null) {
          oprot.writeFieldBegin(PESEL_FIELD_DESC);
          oprot.writeString(struct.pesel);
          oprot.writeFieldEnd();
        }
        if (struct.klucz != null) {
          oprot.writeFieldBegin(KLUCZ_FIELD_DESC);
          oprot.writeString(struct.klucz);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAccountBalance_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccountBalance_argsTupleScheme getScheme() {
        return new getAccountBalance_argsTupleScheme();
      }
    }

    private static class getAccountBalance_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAccountBalance_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getAccountBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPesel()) {
          optionals.set(0);
        }
        if (struct.isSetKlucz()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPesel()) {
          oprot.writeString(struct.pesel);
        }
        if (struct.isSetKlucz()) {
          oprot.writeString(struct.klucz);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getAccountBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pesel = iprot.readString();
          struct.setPeselIsSet(true);
        }
        if (incoming.get(1)) {
          struct.klucz = iprot.readString();
          struct.setKluczIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAccountBalance_result implements org.apache.thrift.TBase<getAccountBalance_result, getAccountBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAccountBalance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccountBalance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAccountBalance_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAccountBalance_resultTupleSchemeFactory();

    public CurrencyDetails success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CurrencyDetails.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccountBalance_result.class, metaDataMap);
    }

    public getAccountBalance_result() {
    }

    public getAccountBalance_result(
      CurrencyDetails success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccountBalance_result(getAccountBalance_result other) {
      if (other.isSetSuccess()) {
        this.success = new CurrencyDetails(other.success);
      }
    }

    public getAccountBalance_result deepCopy() {
      return new getAccountBalance_result(this);
    }


    public void clear() {
      this.success = null;
    }


    public CurrencyDetails getSuccess() {
      return this.success;
    }

    public getAccountBalance_result setSuccess( CurrencyDetails success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CurrencyDetails)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccountBalance_result)
        return this.equals((getAccountBalance_result)that);
      return false;
    }

    public boolean equals(getAccountBalance_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }


    public int compareTo(getAccountBalance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAccountBalance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAccountBalance_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccountBalance_resultStandardScheme getScheme() {
        return new getAccountBalance_resultStandardScheme();
      }
    }

    private static class getAccountBalance_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAccountBalance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAccountBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CurrencyDetails();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAccountBalance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAccountBalance_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccountBalance_resultTupleScheme getScheme() {
        return new getAccountBalance_resultTupleScheme();
      }
    }

    private static class getAccountBalance_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAccountBalance_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getAccountBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getAccountBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CurrencyDetails();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
